const y="modulepreload",x=function(e){return"/"+e},g={},w=function(s,n,a){let i=Promise.resolve();if(n&&n.length>0){document.getElementsByTagName("link");const t=document.querySelector("meta[property=csp-nonce]"),r=(t==null?void 0:t.nonce)||(t==null?void 0:t.getAttribute("nonce"));i=Promise.allSettled(n.map(o=>{if(o=x(o),o in g)return;g[o]=!0;const d=o.endsWith(".css"),m=d?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${o}"]${m}`))return;const l=document.createElement("link");if(l.rel=d?"stylesheet":y,d||(l.as="script"),l.crossOrigin="",l.href=o,r&&l.setAttribute("nonce",r),document.head.appendChild(l),d)return new Promise((p,I)=>{l.addEventListener("load",p),l.addEventListener("error",()=>I(new Error(`Unable to preload CSS for ${o}`)))})}))}function c(t){const r=new Event("vite:preloadError",{cancelable:!0});if(r.payload=t,window.dispatchEvent(r),!r.defaultPrevented)throw t}return i.then(t=>{for(const r of t||[])r.status==="rejected"&&c(r.reason);return s().catch(c)})};console.log("🚀 Background service worker loaded - Seer Sync Extension");const _="http://localhost:8000",S="AIzaSyBYiu0nNAURf96XWjnHf0Vt05Ndc2aUzUI";let u=[],f=null;chrome.runtime.onInstalled.addListener(e=>{console.log("📦 Extension installed:",e.reason),h(),e.reason==="install"&&chrome.storage.local.set({isFirstRun:!0,installedAt:Date.now()})});function h(){chrome.contextMenus.removeAll(()=>{console.log("📋 Creating context menus. Contacts:",u.length),chrome.contextMenus.create({id:"seer-sync-send",title:"Send to Seer Sync",contexts:["selection"]}),u.length>0?u.forEach(e=>{chrome.contextMenus.create({id:`contact-${e.id}`,parentId:"seer-sync-send",title:e.contact_name,contexts:["selection"]}),chrome.contextMenus.create({id:`contact-${e.id}-send`,parentId:`contact-${e.id}`,title:"📤 Send as-is",contexts:["selection"]}),chrome.contextMenus.create({id:`contact-${e.id}-proofread`,parentId:`contact-${e.id}`,title:"✏️ Proofread",contexts:["selection"]}),chrome.contextMenus.create({id:`contact-${e.id}-summarize`,parentId:`contact-${e.id}`,title:"📄 Summarize",contexts:["selection"]}),chrome.contextMenus.create({id:`contact-${e.id}-rewrite`,parentId:`contact-${e.id}`,title:"✏️ Rewrite",contexts:["selection"]})}):chrome.contextMenus.create({id:"no-contacts",parentId:"seer-sync-send",title:"No contacts available",enabled:!1,contexts:["selection"]})})}chrome.contextMenus.onClicked.addListener(async(e,s)=>{console.log("🖱️ Context menu clicked:",e.menuItemId);const n=e.selectionText||"",a=(s==null?void 0:s.url)||"";if(!n){console.error("❌ No text selected");return}const i=String(e.menuItemId);let c=null,t=i.replace("contact-","");t.includes("-send")?(c="send",t=t.replace("-send","")):t.includes("-proofread")?(c="proofread",t=t.replace("-proofread","")):t.includes("-summarize")?(c="summarize",t=t.replace("-summarize","")):t.includes("-rewrite")&&(c="rewrite",t=t.replace("-rewrite","")),console.log("📌 Extracted contactId:",t,"processType:",c);const r=u.find(o=>o.id===t);if(console.log("📍 Contact:",r==null?void 0:r.contact_name,"UserId:",f),!r||!f){console.error("❌ Missing contact or userId");return}try{let o=n;c&&c!=="send"&&(console.log("🔄 Processing with Gemini:",c),o=await $(n,c));const d=`📌 "${o}"

📎 ${a}`;console.log("📤 Sending message to:",r.contact_name);const m=await fetch(`${_}/api/v1/messages/send?sender_id=${f}&receiver_id=${r.contact_user_id}&content=${encodeURIComponent(d)}`,{method:"POST"}).then(l=>l.json());m.success?console.log(`✅ Message sent to ${r.contact_name}!`):console.error("❌ Send failed:",m)}catch(o){console.error("❌ Send error:",o)}});async function $(e,s){try{const a=(await w(()=>import("./chunks/index-Btop3vc4.js"),[])).GoogleGenerativeAI,c=new a(S).getGenerativeModel({model:"gemini-2.5-flash"});let t="";if(s==="proofread")t=`Fix grammar and spelling:
"${e}"

Only return corrected text.`;else if(s==="summarize")t=`Summarize in 1-2 sentences:
"${e}"

Only return summary.`;else if(s==="rewrite")t=`Rewrite professionally:
"${e}"

Only return rewritten text.`;else return e;return(await c.generateContent(t)).response.text()}catch(n){return console.error("❌ Gemini error:",n),e}}chrome.runtime.onMessage.addListener((e,s,n)=>{var a;return console.log("📨 Message received:",e.type),e.type==="PING"?(n({success:!0}),!0):e.type==="UPDATE_CONTACTS"?(console.log("✅ Updating contacts:",(a=e.contacts)==null?void 0:a.length),u=e.contacts||[],f=e.userId||null,h(),n({success:!0}),!0):e.type==="CONTENT_SCRIPT_READY"?(n({success:!0}),!0):e.type==="GET_TAB_INFO"?(chrome.tabs.query({active:!0,currentWindow:!0},i=>{i[0]?n({success:!0,tab:{id:i[0].id,url:i[0].url,title:i[0].title}}):n({success:!1,error:"No active tab found"})}),!0):(n({success:!1,error:"Unknown message type"}),!0)});chrome.tabs.onUpdated.addListener((e,s,n)=>{s.status==="complete"&&console.log("📄 Tab updated:",n.url)});console.log("✅ Background service worker initialization complete");
